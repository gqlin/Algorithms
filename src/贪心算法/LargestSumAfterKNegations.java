package 贪心算法;


import org.junit.Test;

import java.util.Arrays;
import java.util.stream.IntStream;

/**
 * @description：
 * @date： 2022/5/19 22:55
 * @author：gqlin
 */
public class LargestSumAfterKNegations {
/*    1005. K 次取反后最大化的数组和
    给你一个整数数组 nums 和一个整数 k ，按以下方法修改该数组：

    选择某个下标 i 并将 nums[i] 替换为 -nums[i] 。
    重复这个过程恰好 k 次。可以多次选择同一个下标 i 。

    以这种方式修改数组后，返回数组 可能的最大和 。



    示例 1：

    输入：nums = [4,2,3], k = 1
    输出：5
    解释：选择下标 1 ，nums 变为 [4,-2,3] 。
    示例 2：

    输入：nums = [3,-1,0,2], k = 3
    输出：6
    解释：选择下标 (1, 2, 2) ，nums 变为 [3,1,0,2] 。
    示例 3：

    输入：nums = [2,-3,-1,5,-4], k = 2
    输出：13
    解释：选择下标 (1, 4) ，nums 变为 [2,3,-1,5,4] 。


    提示：

            1 <= nums.length <= 104
            -100 <= nums[i] <= 100
            1 <= k <= 104*/

    //解题步骤：https://www.programmercarl.com/1005.K%E6%AC%A1%E5%8F%96%E5%8F%8D%E5%90%8E%E6%9C%80%E5%A4%A7%E5%8C%96%E7%9A%84%E6%95%B0%E7%BB%84%E5%92%8C.html#%E6%80%BB%E7%BB%93

/*    #思路
    本题思路其实比较好想了，如何可以让数组和最大呢？

    贪心的思路，局部最优：让绝对值大的负数变为正数，当前数值达到最大，整体最优：整个数组和达到最大。

    局部最优可以推出全局最优。

    那么如果将负数都转变为正数了，K依然大于0，此时的问题是一个有序正整数序列，如何转变K次正负，让 数组和 达到最大。

    那么又是一个贪心：局部最优：只找数值最小的正整数进行反转，当前数值可以达到最大（例如正整数数组{5, 3, 1}，反转1 得到-1 比 反转5得到的-5 大多了），全局最优：整个 数组和 达到最大。

    虽然这道题目大家做的时候，可能都不会去想什么贪心算法，一鼓作气，就AC了。

    我这里其实是为了给大家展现出来 经常被大家忽略的贪心思路，这么一道简单题，就用了两次贪心！

    那么本题的解题步骤为：

    第一步：将数组按照绝对值大小从大到小排序，注意要按照绝对值的大小
    第二步：从前向后遍历，遇到负数将其变为正数，同时K--
    第三步：如果K还大于0，那么反复转变数值最小的元素，将K用完
    第四步：求和


    这里其实用了两次贪心！

第一次贪心：局部最优：让绝对值大的负数变为正数，当前数值达到最大，整体最优：整个数组和达到最大。

处理之后，如果K依然大于0，此时的问题是一个有序正整数序列，如何转变K次正负，让 数组和 达到最大。

第二次贪心：局部最优：只找数值最小的正整数进行反转，当前数值可以达到最大（例如正整数数组{5, 3, 1}，反转1 得到-1 比 反转5得到的-5 大多了），全局最优：整个 数组和 达到最大。

贪心算法：K次取反后最大化的数组和 (opens new window)中的代码，最后while处理K的时候，其实直接判断奇偶数就可以了，文中给出的方式太粗暴了，哈哈，Carl大意了。

例外一位录友留言给出一个很好的建议，因为文中是使用快排，仔细看题，题目中限定了数据范围是正负一百，所以可以使用桶排序，这样时间复杂度就可以优化为$O(n)$了。但可能代码要复杂一些了。*/

    public int largestSumAfterKNegations(int[] nums, int K) {
        // 将数组按照绝对值大小从大到小排序，注意要按照绝对值的大小
        nums = IntStream.of(nums)
                .boxed()
                .sorted((o1, o2) -> Math.abs(o2) - Math.abs(o1))
                .mapToInt(Integer::intValue).toArray();
        int len = nums.length;
        for (int i = 0; i < len; i++) {
            //从前向后遍历，遇到负数将其变为正数，同时K--
            if (nums[i] < 0 && K > 0) {
                nums[i] = -nums[i];
                K--;
            }
        }
        // 如果K还大于0，那么反复转变数值最小的元素，将K用完

        if (K % 2 == 1) nums[len - 1] = -nums[len - 1];
        return Arrays.stream(nums).sum();

    }

    @Test
    public void test() {
        largestSumAfterKNegations(new int[]{2, -3, -1, 5, -4}, 2);
    }
}
